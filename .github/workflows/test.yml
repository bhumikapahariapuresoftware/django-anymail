name: test

on:
  pull_request:
  push:
    branches: [ "main", "v[0-9]*" ]
    tags: [ "v[0-9]*" ]



jobs:
  get-envlist:
    runs-on: ubuntu-20.04
    outputs:
      envlist: ${{ steps.generate-envlist.outputs.envlist }}
    steps:
      - name: Get code
        uses: actions/checkout@v2
      - name: Install tox-gh-matrix
        run: |
          python -m pip install tox tox-gh-matrix
          python -m tox --version
      - name: Generate tox envlist
        id: generate-envlist
        run: |
          python -m tox --gh-matrix
          python -m tox --gh-matrix-dump  # for debugging

  test:
    runs-on: ubuntu-20.04
    needs: get-envlist
    strategy:
      matrix:
        tox: ${{ fromJSON(needs.get-envlist.outputs.envlist) }}
      fail-fast: false

    name: ${{ matrix.tox.name }} ${{ matrix.tox.ignore_outcome && 'allow-failures' || '' }}
    timeout-minutes: 15
    steps:
      - name: Get code
        uses: actions/checkout@v2
      - name: Setup Python ${{ matrix.tox.python.version }}
        # Ensure matrix Python version is installed and available for tox
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.tox.python.spec }}
      - name: Setup default Python
        # Change default Python version back to something consistent
        # for installing/running tox
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: Install tox
        run: |
          set -x
          python -VV
          python -m pip install tox
          python -m tox --version
      - name: Test ${{ matrix.tox.name }}
        run: |
          python -m tox -e ${{ matrix.tox.name }}
        continue-on-error: ${{ matrix.tox.ignore_outcome == true }}
        env:
          CONTINUOUS_INTEGRATION: true
          TOX_OVERRIDE_IGNORE_OUTCOME: false

  armv64_py38_job:
      name: Build and Test for arm64 with py38
      runs-on: ubuntu-20.04
      steps:
        - uses: actions/checkout@v2
        - name: Set up QEMU
          id: qemu
          uses: docker/setup-qemu-action@v1
        - name: Install and Run tests
          run: |
            docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
              arm64v8/ubuntu:20.04 \
              bash -exc 'apt-get update && apt-get -y install python3 python3-pip python3-venv curl git && \
              ln -fs /usr/share/zoneinfo/America/New_York /etc/localtime && export DEBIAN_FRONTEND=noninteractive && apt-get install -y tzdata && dpkg-reconfigure --frontend noninteractive tzdata && \
              python3 -m pip install virtualenv && python3 -m venv py38-venv && \
              source py38-venv/bin/activate && \
              python3 --version && \
              uname -m && \
              whoami && \
              pwd && \
              ls && \
              python3 -m pip install --upgrade pip && \
              python -m pip install tox && \
              python -m tox --version && \
              python -m tox -e django40-py38-all && \
              deactivate'
